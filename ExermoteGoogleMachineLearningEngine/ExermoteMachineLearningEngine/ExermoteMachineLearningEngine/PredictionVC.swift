//
//  PredictionVC.swift
//  ExermotePredictionAPI
//
//  Created by Stephan Lerner on 14.05.17.
//  Copyright Â© 2017 Stephan Lerner. All rights reserved.
//

import UIKit

class PredictionVC: UIViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        var accessToken: String?
        
        GIDSignIn.sharedInstance().currentUser.authentication.getTokensWithHandler { (authentication, error) in
            
            if let err = error {
                print(err)
            } else {
                if let auth = authentication {
                    accessToken = auth.accessToken
                }
            }
        }
        
        if let accTok = accessToken {
            
            let parameters = [
                    "instances": [
                        [[ 0.385,       0.025,       0.4,         0.48983882,  0.48628049,  0.50337216,
                            0.90095847,  0.36464968,  0.48726115,  0.49279279,  0.43055556,  0.41604278],
                            [ 0.44,        0.02,        0.385,       0.4253679,   0.49542683,  0.53648069,
                                0.91373802,  0.42356688,  0.37261146,  0.51171171,  0.53843669,  0.45614973],
                            [ 0.5,         0.015,       0.375,       0.47091801,  0.51753049,  0.53893317,
                                0.9201278,   0.49681529,  0.31847134,  0.55810811,  0.61111111,  0.50481283],
                            [ 0.515,       0.01,        0.4,         0.48773651, 0.50228659,  0.52483139,
                            0.93610224,  0.52070064,  0.31210191,  0.57432432,  0.57041344,  0.5513369],
                            [ 0.495,       0.005,       0.435,       0.48703574,  0.49542683,  0.51992643,
                            0.95846645,  0.49203822,  0.35031847,  0.57297297,  0.58397933,  0.56684492],
                            [ 0.455,       0.005,       0.455,       0.49684653,  0.50304878,  0.51808706,
                            0.95846645,  0.37738854,  0.48089172,  0.54954955,  0.58139535,  0.59518717],
                            [ 0.415,       0.01,       0.45,        0.51156272,  0.5007622,   0.52237891,
                            0.93610224,  0.33121019,  0.54140127,  0.55585586,  0.57751938,  0.57165775],
                            [ 0.39,        0.015,       0.465,       0.50035039,  0.50381098,  0.52605763,
                            0.92651757,  0.30095541,  0.57324841,  0.55225225,  0.54295866,  0.55614973],
                            [ 0.38,        0.015,       0.475,       0.49964961,  0.50457317,  0.52605763,
                            0.9201278,   0.28184713,  0.59076433,  0.55945946,  0.57105943,  0.53796791],
                            [ 0.405,       0.01,        0.495,       0.49964961,  0.48170732,  0.52237891,
                            0.93929712,  0.25955414,  0.60987261,  0.55,        0.5251938,   0.49786096],
                            [ 0.42,        0.005,       0.495,       0.50105116,  0.50685976,  0.52115267,
                            0.94888179, 0.2611465,   0.61305732,  0.5454955,   0.57881137,  0.53315508],
                            [ 0.41,        0.01,        0.48,        0.50525578,  0.4992378,   0.52851012,
                            0.93929712,  0.28503185,  0.59872611, 0.53558559,  0.57848837,  0.5486631 ],
                            [ 0.415,       0.01,        0.475,       0.5024527,   0.49542683,  0.5309626,
                            0.94249201,  0.2977707,   0.5843949,   0.53783784,  0.52293282,  0.51069519],
                            [ 0.435,       0.005,      0.47,        0.48843728,  0.50228659,  0.52544451,
                            0.95527157,  0.32324841, 0.54299363,  0.52927928,  0.53843669, 0.50855615],
                            [ 0.455,       0.005,       0.45,        0.49474422,  0.48932927,  0.52421827,
                            0.95846645,  0.38535032,  0.48089172,  0.52567568,  0.56136951,  0.52192513],
                            [ 0.47,        0.005,       0.435,       0.49124036,  0.50304878,  0.52237891,
                            0.95527157,  0.43312102, 0.43630573,  0.53333333,  0.56750646,  0.51283422],
                            [ 0.495,       0.005,       0.415,       0.49614576, 0.49847561,  0.53157572,
                            0.9456869,   0.49203822,  0.38535032,  0.53243243, 0.56395349,  0.50481283],
                            [ 0.52,        0.01,        0.405,       0.50105116,  0.50685976,  0.52176579,
                            0.93929712,  0.53343949,  0.35191083,  0.53918919,  0.56330749,  0.51925134],
                            [ 0.535,       0.01,        0.4,         0.49124036,  0.50381098,  0.51563458,
                            0.93290735,  0.55254777,  0.32802548,  0.54144144,  0.55717054,  0.51657754],
                            [ 0.55,        0.01,        0.4,         0.50035039,  0.50304878,  0.51686082,
                            0.92971246,  0.57324841,  0.30414013,  0.5518018,   0.52713178,  0.50962567],
                            [ 0.555,       0.015,       0.4,         0.47091801,  0.50838415,  0.5193133,
                            0.92971246,  0.57802548,  0.28025478,  0.54504505,  0.54005168,  0.53262032],
                            [ 0.545,       0.015,       0.4,         0.48703574,  0.49695122,  0.5131821,
                            0.92971246,  0.56687898,  0.28980892,  0.53828829,  0.57138243,  0.53475936],
                            [ 0.535,       0.015,       0.38,        0.47652418,  0.50457317,  0.52237891,
                            0.9201278,   0.54458599,  0.3089172,   0.52522523,  0.54198966,  0.55454545],
                            [ 0.505,       0.02,        0.365,       0.48773651,  0.51067073,  0.52667075,
                            0.91373802,  0.50796178,  0.34713376,  0.54099099,  0.56395349,  0.57272727],
                            [ 0.485,       0.015,       0.375,       0.50385424,  0.50304878,  0.52299203,
                            0.9201278,   0.48089172,  0.38375796,  0.56126126,  0.56653747,  0.55882353],
                            [ 0.465,       0.01,        0.4,         0.4975473,   0.49771341,  0.51747394,
                            0.92971246,  0.44904459,  0.41242038,  0.56396396,  0.54360465,  0.55294118],
                            [ 0.45,        0.01,       0.415,       0.49264191,  0.50381098,  0.52115267,
                            0.93610224,  0.41242038, 0.44904459,  0.55855856,  0.56330749,  0.5540107 ],
                            [ 0.435,       0.01,       0.43,        0.49894884,  0.50609756,  0.52360515,
                            0.93929712,  0.38216561,  0.48407643,  0.55945946,  0.56686047,  0.54545455],
                            [ 0.435,       0.005,       0.44,        0.50035039,  0.50228659,  0.52605763,
                            0.9456869,  0.36783439,  0.50318471,  0.55585586,  0.5629845,   0.53582888],
                            [ 0.45,        0.005,       0.45,        0.50035039,  0.49542683,  0.52360515,
                            0.95207668,  0.37261146,  0.5,         0.54864865,  0.55684755,  0.52620321]]
                    ]
            ]
            
            let url = NSURL(string: "https://ml.googleapis.com/v1/projects/exermotemachinelearningengine/models/predictExercise/versions/timesteps_30_timesteps_in_future_10_nodes_per_layer_16_filter_length_3:predict")
            
            let session = URLSession.shared
            
            let request = NSMutableURLRequest(url: url! as URL)
            request.httpMethod = "POST" //set http method as POST
            
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: .prettyPrinted)
                
            } catch let error {
                print(error.localizedDescription)
            }
            
            request.addValue("application/json", forHTTPHeaderField: "Content-Type")
            request.addValue("application/json", forHTTPHeaderField: "Accept")
            request.addValue("Bearer \(accTok)", forHTTPHeaderField: "Authorization")
            
            let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
                
                guard error == nil else {
                    return
                }
                
                guard let data = data else {
                    return
                }
                
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        print(json)
                    }
                    
                } catch let error {
                    print(error.localizedDescription)
                }
                
            })
            
            task.resume()
        }
    }
}
